use js_sys::Math;

const PORTS: [u16; 54] = [
    500, 854, 859, 864, 878, 880, 890, 891, 894, 903, 908, 928, 934, 939, 942, 943, 945, 946, 955,
    968, 987, 988, 1002, 1010, 1014, 1018, 1070, 1074, 1180, 1387, 1701, 1843, 2371, 2408, 2506,
    3138, 3476, 3581, 3854, 4177, 4198, 4233, 4500, 5279, 5956, 7103, 7152, 7156, 7281, 7559, 8319,
    8742, 8854, 8886,
];

const ADDRESSES: [&str; 39] = [
    "162.159.192.19:1701",
    "188.114.98.61:955",
    "188.114.96.137:988",
    "188.114.99.66:4198",
    "188.114.99.212:1074",
    "188.114.98.224:4500",
    "188.114.98.224:878",
    "188.114.98.224:1387",
    "188.114.98.224:3476",
    "188.114.98.224:500",
    "188.114.98.224:2371",
    "188.114.98.224:1070",
    "188.114.98.224:854",
    "188.114.98.224:864",
    "188.114.98.224:939",
    "188.114.98.224:2408",
    "188.114.98.224:908",
    "162.159.192.121:2371",
    "188.114.96.145:1074",
    "188.114.98.0:878",
    "188.114.98.228:878",
    "188.114.99.0:878",
    "188.114.98.224:1074",
    "162.159.195.238:7156",
    "188.114.98.224:894",
    "188.114.96.191:3854",
    "188.114.99.53:890",
    "188.114.96.157:890",
    "188.114.96.6:890",
    "188.114.99.137:968",
    "188.114.96.239:1387",
    "8.34.146.47:864",
    "8.35.211.119:500",
    "8.34.70.34:1002",
    "8.34.70.82:988",
    "8.34.146.156:2408",
    "8.39.204.244:3476",
    "8.35.211.140:7156",
    "8.34.146.37:3854",
];

pub fn random_port() -> u16 {
    let i = (Math::random() * PORTS.len() as f64) as usize;
    PORTS[i]
}

pub fn random_u32() -> u32 {
    (Math::random() * (u32::MAX as f64)) as u32
}

fn parse_cidr(cidr: &str) -> (u32, u32) {
    let parts: Vec<&str> = cidr.split('/').collect();
    let base_ip: u32 = parts[0]
        .split('.')
        .map(|x| x.parse::<u8>().unwrap() as u32)
        .fold(0, |acc, octet| (acc << 8) | octet);
    let prefix_len: u32 = parts[1].parse().unwrap();
    let range_size: u32 = 1 << (32 - prefix_len);
    (base_ip, range_size)
}

fn generate_ip(cidr: &str) -> String {
    let (base_ip, range_size) = parse_cidr(cidr);
    let offset = random_u32() % range_size;
    let ip = base_ip + offset;

    // Convert to dotted-decimal format
    format!(
        "{}.{}.{}.{}",
        (ip >> 24) & 0xFF,
        (ip >> 16) & 0xFF,
        (ip >> 8) & 0xFF,
        ip & 0xFF
    )
}

pub fn get_random_address() -> &'static str {
    // let cidrs = vec![
    //     "173.245.48.0/20",
    //     "103.21.244.0/22",
    //     "103.22.200.0/22",
    //     "103.31.4.0/22",
    //     "141.101.64.0/18",
    //     "108.162.192.0/18",
    //     "190.93.240.0/20",
    //     "188.114.96.0/20",
    //     "197.234.240.0/22",
    //     "198.41.128.0/17",
    //     "162.158.0.0/15",
    //     "104.16.0.0/13",
    //     "104.24.0.0/14",
    //     "172.64.0.0/13",
    //     "131.0.72.0/22",
    // ];

    // let cidr_index = random_u32() as usize % cidrs.len();
    // generate_ip(cidrs[cidr_index])
    let i = (Math::random() * ADDRESSES.len() as f64) as usize;
    ADDRESSES[i]
}
